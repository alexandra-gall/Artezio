Нам необходимо разработать приложение, которое расчитавает заработную плату сотрудников, 
исходя из отработанного времени и участия сотрудников в проектах (на Java).

Иерархия классов будет следующая: 
Employee - работник, основной родительский класс для всех разновидностей работников (абстрактный класс).
В нем есть абстрактный метод по формированию зарплаты calc().
У него будет три потомка:   
1. Pesonal - работник по найму с оплатой за фактически отработанное время. Имеет ставку за час.
   Абстрактный класс, наследуется от Employee, и реализует интерфейс WorkTime.
2. Engineer - инженер. Имеет ставку и оплату за час + бонусы от выполняемого проекта.
   Абстрактный класс, наследуется от Employee, и реализует интерфейсы WorkTime и Project.
3. Manager - менеджер. Оплату получает из денег проекта, которым руководит.
   Абстрактный класс, наследуется от Employee, и реализует интерфейс Project.
   
Класс Pesonal является родительским для двух классов:
    Cleaner - уборщица.
    Driver - водитель.
Класс Engineer является родительским для следующих классов:
    Programmer - инженер-программист.
	    Programmer является родительским для TeamLeader - ведущий программист.
		TeamLeader как начальник отдела, реализует дополнительно интерфейс Heading.
    Tester - инженер по тестированию.
Класс Manager является родительским для класса:
    ProjectManager - проектный менеджер, также реализует интерфейс Heading.
	    ProjectManager является родительским классом для SeniorManager - руководитель направления.
		
В Java нет множественного наследования, но есть возможность реализовать в одном классе несколько 
Интрефейсов. 
В нашем случае естт 3 интерфейса, в которых есть метод по расчету зарплаты: 
    WorkTime - расчет оплаты исходя из отработанного времени (часы умножаются на ставку).
	Project - расчет оплаты исходя из участия в проекте (бюджет проекта делится пропорционально персональному вкладу).
	Heading - расчет оплаты исходя из руководства (количество подчиненных).
	
В итоге во всех классах (не абстрактных), мы реализуем метод calc по своему: 
   - у Cleaner и Driver - это реализация интерфейса WorkTime, 
   - у Programmer и Tester - это сумма от реализации WorkTime и Project, 
   - у TeamLeader - к реализации WorkTime и Project добавляется реализация Heading, 
   - у ProjectManager и SeniorManager - это реализация интерфейсов Project и Heading.
   
 В итоге благодаря наследованию и полиморфизму мы можем рассчитать зарплату всех сотрудников, вызвав один единственный 
 метод calc для всех работников, в итоге для каждого конкретного сотрудника будет вызван конкретно его переопределенный 
 метод calc.
 
 Благодаря инкапсуляции реализация конкретного метода calc остается внутри каждого класса, нам не нужно по сути знать, 
 как он реализован, нам нужно знать, что он точно есть в этом классе и мы можем его вызвать для каждого объекта данного класса. 
 